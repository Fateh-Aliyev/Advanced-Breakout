#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <Shader Reader/shaderReader.h>

#include <iostream>
#include <map>
#include <string>
#include <filesystem>
#include <list>
#include <stdio.h>
#include <stdlib.h>
#include <bits/stdc++.h>

#include <ft2build.h>
#include <freetype/freetype.h>
#include FT_FREETYPE_H


void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow *window);
void RenderText(Shader &shader, std::string text, float x, float y, float scale, glm::vec3 color);
void updateBlocks(int totalAmount);

const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 800;
const float PI = 3.141592654;

struct Character {
    unsigned int TextureID; 
    glm::ivec2   Size;      
    glm::ivec2   Bearing;   
    unsigned int Advance;   
};

std::map<GLchar, Character> Characters;
unsigned int textVAO, textVBO;

glm::vec2 paddlePos = glm::vec2(0.0f, -0.9f);
glm::vec2 ballPos = glm::vec2(0.0f, 0.0f);
glm::vec2 ballVelocity = glm::vec2(0, 0);

int blockData[70][10];

int score = 0;

float distance(glm::vec2 a, glm::vec2 b) {
    return sqrt(pow(a[0]-b[0], 2) + pow(a[1]-b[1], 2));
}

int gameOver = 0;
int newGame = 1;

std::string newGameLine = "Press Space to Start";
std::string GameOverLine = "Game Over";

int main() {
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Advanced Breakout", NULL, NULL);
    if (window == NULL) {
        std::cout << "Failed to create GLFW window." << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    // glEnable(GL_CULL_FACE);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    float paddleVertices[] = {
        // -0.0625f, 0.01f, 0.0f, 0.0f, 0.0f, 1.0f,
        // 0.0625f, 0.01f, 0.0f, 0.0f, 0.0f, 1.0f,
        // -0.0625f, -0.01f, 0.0f, 0.0f, 0.0f, 1.0f,

        // -0.0625f, -0.01f, 0.0f, 0.0f, 0.0f, 1.0f,
        // 0.0625f, 0.01f, 0.0f, 0.0f, 0.0f, 1.0f,
        // 0.0625f, -0.01f, 0.0f, 0.0f, 0.0f, 1.0f,
        -0.125, 0.01, 0.0, 0.0, 0.0, 1.0,
        -0.125, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.125, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.125, 0.01, 0.0, 0.0, 0.0, 1.0,
        0.114894, 0.0111995, 0.0, 0.0, 0.0, 1.0,
        0.125, 0.00999999, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.104776, 0.0122979, 0.0, 0.0, 0.0, 1.0,
        0.114894, 0.0111995, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.0946483, 0.0132949, 0.0, 0.0, 0.0, 1.0,
        0.104776, 0.0122979, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.0845108, 0.0141908, 0.0, 0.0, 0.0, 1.0,
        0.0946483, 0.0132949, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.0743649, 0.0149852, 0.0, 0.0, 0.0, 1.0,
        0.0845108, 0.0141908, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.0642115, 0.015678, 0.0, 0.0, 0.0, 1.0,
        0.0743649, 0.0149852, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.0540517, 0.0162693, 0.0, 0.0, 0.0, 1.0,
        0.0642115, 0.015678, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.0438865, 0.016759, 0.0, 0.0, 0.0, 1.0,
        0.0540517, 0.0162693, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.0337168, 0.0171471, 0.0, 0.0, 0.0, 1.0,
        0.0438865, 0.016759, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.0235439, 0.0174334, 0.0, 0.0, 0.0, 1.0,
        0.0337169, 0.0171471, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.0133685, 0.0176179, 0.0, 0.0, 0.0, 1.0,
        0.0235439, 0.0174334, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        0.00319187, 0.0177008, 0.0, 0.0, 0.0, 1.0,
        0.0133685, 0.0176179, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.00698512, 0.0176818, 0.0, 0.0, 0.0, 1.0,
        0.00319188, 0.0177007, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.0171614, 0.0175611, 0.0, 0.0, 0.0, 1.0,
        -0.00698511, 0.0176818, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.027336, 0.0173385, 0.0, 0.0, 0.0, 1.0,
        -0.0171614, 0.017561, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.0375078, 0.0170144, 0.0, 0.0, 0.0, 1.0,
        -0.027336, 0.0173386, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.0476759, 0.0165884, 0.0, 0.0, 0.0, 1.0,
        -0.0375078, 0.0170144, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.0578392, 0.0160608, 0.0, 0.0, 0.0, 1.0,
        -0.0476759, 0.0165884, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.0679968, 0.0154316, 0.0, 0.0, 0.0, 1.0,
        -0.0578392, 0.0160608, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.0781475, 0.0147009, 0.0, 0.0, 0.0, 1.0,
        -0.0679968, 0.0154316, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.0882904, 0.0138687, 0.0, 0.0, 0.0, 1.0,
        -0.0781475, 0.0147009, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.0984245, 0.0129352, 0.0, 0.0, 0.0, 1.0,
        -0.0882904, 0.0138687, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.108549, 0.0119003, 0.0, 0.0, 0.0, 1.0,
        -0.0984245, 0.0129352, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.118662, 0.0107642, 0.0, 0.0, 0.0, 1.0,
        -0.108549, 0.0119003, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0,
        -0.118662, 0.0107642, 0.0, 0.0, 0.0, 1.0,
        0.125, 0.01, 0.0, 0.0, 0.0, 1.0,
        0.0, -0.01, 0.0, 0.0, 0.0, 1.0
    };

    float ballVertices[] = {
        0, 0, 0, 1, 0, 0, 
        0.01, 0, 0, 1, 0, 0, 
        0.00999391, 0.000348995, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00999391, 0.000348995, 0, 1, 0, 0, 
        0.00997564, 0.000697565, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00997564, 0.000697565, 0, 1, 0, 0, 
        0.00994522, 0.00104528, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00994522, 0.00104528, 0, 1, 0, 0, 
        0.00990268, 0.00139173, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00990268, 0.00139173, 0, 1, 0, 0, 
        0.00984808, 0.00173648, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00984808, 0.00173648, 0, 1, 0, 0, 
        0.00978148, 0.00207912, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00978148, 0.00207912, 0, 1, 0, 0, 
        0.00970296, 0.00241922, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00970296, 0.00241922, 0, 1, 0, 0, 
        0.00961262, 0.00275637, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00961262, 0.00275637, 0, 1, 0, 0, 
        0.00951057, 0.00309017, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00951057, 0.00309017, 0, 1, 0, 0, 
        0.00939693, 0.0034202, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00939693, 0.0034202, 0, 1, 0, 0, 
        0.00927184, 0.00374607, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00927184, 0.00374607, 0, 1, 0, 0, 
        0.00913545, 0.00406737, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00913545, 0.00406737, 0, 1, 0, 0, 
        0.00898794, 0.00438371, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00898794, 0.00438371, 0, 1, 0, 0, 
        0.00882948, 0.00469472, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00882948, 0.00469472, 0, 1, 0, 0, 
        0.00866025, 0.005, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00866025, 0.005, 0, 1, 0, 0, 
        0.00848048, 0.00529919, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00848048, 0.00529919, 0, 1, 0, 0, 
        0.00829038, 0.00559193, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00829038, 0.00559193, 0, 1, 0, 0, 
        0.00809017, 0.00587785, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00809017, 0.00587785, 0, 1, 0, 0, 
        0.00788011, 0.00615662, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00788011, 0.00615662, 0, 1, 0, 0, 
        0.00766044, 0.00642788, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00766044, 0.00642788, 0, 1, 0, 0, 
        0.00743145, 0.00669131, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00743145, 0.00669131, 0, 1, 0, 0, 
        0.0071934, 0.00694658, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.0071934, 0.00694658, 0, 1, 0, 0, 
        0.00694658, 0.0071934, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00694658, 0.0071934, 0, 1, 0, 0, 
        0.00669131, 0.00743145, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00669131, 0.00743145, 0, 1, 0, 0, 
        0.00642788, 0.00766044, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00642788, 0.00766044, 0, 1, 0, 0, 
        0.00615661, 0.00788011, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00615661, 0.00788011, 0, 1, 0, 0, 
        0.00587785, 0.00809017, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00587785, 0.00809017, 0, 1, 0, 0, 
        0.00559193, 0.00829038, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00559193, 0.00829038, 0, 1, 0, 0, 
        0.00529919, 0.00848048, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00529919, 0.00848048, 0, 1, 0, 0, 
        0.005, 0.00866025, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.005, 0.00866025, 0, 1, 0, 0, 
        0.00469472, 0.00882948, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00469472, 0.00882948, 0, 1, 0, 0, 
        0.00438371, 0.00898794, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00438371, 0.00898794, 0, 1, 0, 0, 
        0.00406737, 0.00913545, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00406737, 0.00913545, 0, 1, 0, 0, 
        0.00374607, 0.00927184, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00374607, 0.00927184, 0, 1, 0, 0, 
        0.0034202, 0.00939693, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.0034202, 0.00939693, 0, 1, 0, 0, 
        0.00309017, 0.00951057, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00309017, 0.00951057, 0, 1, 0, 0, 
        0.00275637, 0.00961262, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00275637, 0.00961262, 0, 1, 0, 0, 
        0.00241922, 0.00970296, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00241922, 0.00970296, 0, 1, 0, 0, 
        0.00207912, 0.00978148, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00207912, 0.00978148, 0, 1, 0, 0, 
        0.00173648, 0.00984808, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00173648, 0.00984808, 0, 1, 0, 0, 
        0.00139173, 0.00990268, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00139173, 0.00990268, 0, 1, 0, 0, 
        0.00104528, 0.00994522, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00104528, 0.00994522, 0, 1, 0, 0, 
        0.000697565, 0.00997564, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.000697565, 0.00997564, 0, 1, 0, 0, 
        0.000348994, 0.00999391, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.000348994, 0.00999391, 0, 1, 0, 0, 
        -4.37114e-10, 0.01, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -4.37114e-10, 0.01, 0, 1, 0, 0, 
        -0.000348995, 0.00999391, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.000348995, 0.00999391, 0, 1, 0, 0, 
        -0.000697566, 0.00997564, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.000697566, 0.00997564, 0, 1, 0, 0, 
        -0.00104529, 0.00994522, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00104529, 0.00994522, 0, 1, 0, 0, 
        -0.00139173, 0.00990268, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00139173, 0.00990268, 0, 1, 0, 0, 
        -0.00173648, 0.00984808, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00173648, 0.00984808, 0, 1, 0, 0, 
        -0.00207912, 0.00978148, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00207912, 0.00978148, 0, 1, 0, 0, 
        -0.00241922, 0.00970296, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00241922, 0.00970296, 0, 1, 0, 0, 
        -0.00275637, 0.00961262, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00275637, 0.00961262, 0, 1, 0, 0, 
        -0.00309017, 0.00951056, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00309017, 0.00951056, 0, 1, 0, 0, 
        -0.0034202, 0.00939693, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.0034202, 0.00939693, 0, 1, 0, 0, 
        -0.00374607, 0.00927184, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00374607, 0.00927184, 0, 1, 0, 0, 
        -0.00406737, 0.00913545, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00406737, 0.00913545, 0, 1, 0, 0, 
        -0.00438371, 0.00898794, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00438371, 0.00898794, 0, 1, 0, 0, 
        -0.00469472, 0.00882948, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00469472, 0.00882948, 0, 1, 0, 0, 
        -0.005, 0.00866025, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.005, 0.00866025, 0, 1, 0, 0, 
        -0.00529919, 0.00848048, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00529919, 0.00848048, 0, 1, 0, 0, 
        -0.00559193, 0.00829037, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00559193, 0.00829037, 0, 1, 0, 0, 
        -0.00587785, 0.00809017, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00587785, 0.00809017, 0, 1, 0, 0, 
        -0.00615661, 0.00788011, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00615661, 0.00788011, 0, 1, 0, 0, 
        -0.00642788, 0.00766044, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00642788, 0.00766044, 0, 1, 0, 0, 
        -0.00669131, 0.00743145, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00669131, 0.00743145, 0, 1, 0, 0, 
        -0.00694658, 0.0071934, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00694658, 0.0071934, 0, 1, 0, 0, 
        -0.0071934, 0.00694658, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.0071934, 0.00694658, 0, 1, 0, 0, 
        -0.00743145, 0.00669131, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00743145, 0.00669131, 0, 1, 0, 0, 
        -0.00766045, 0.00642787, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00766045, 0.00642787, 0, 1, 0, 0, 
        -0.00788011, 0.00615661, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00788011, 0.00615661, 0, 1, 0, 0, 
        -0.00809017, 0.00587785, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00809017, 0.00587785, 0, 1, 0, 0, 
        -0.00829038, 0.00559193, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00829038, 0.00559193, 0, 1, 0, 0, 
        -0.00848048, 0.00529919, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00848048, 0.00529919, 0, 1, 0, 0, 
        -0.00866026, 0.005, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00866026, 0.005, 0, 1, 0, 0, 
        -0.00882948, 0.00469472, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00882948, 0.00469472, 0, 1, 0, 0, 
        -0.00898794, 0.00438371, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00898794, 0.00438371, 0, 1, 0, 0, 
        -0.00913545, 0.00406737, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00913545, 0.00406737, 0, 1, 0, 0, 
        -0.00927184, 0.00374606, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00927184, 0.00374606, 0, 1, 0, 0, 
        -0.00939693, 0.0034202, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00939693, 0.0034202, 0, 1, 0, 0, 
        -0.00951056, 0.00309017, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00951056, 0.00309017, 0, 1, 0, 0, 
        -0.00961262, 0.00275637, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00961262, 0.00275637, 0, 1, 0, 0, 
        -0.00970296, 0.00241922, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00970296, 0.00241922, 0, 1, 0, 0, 
        -0.00978148, 0.00207912, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00978148, 0.00207912, 0, 1, 0, 0, 
        -0.00984808, 0.00173648, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00984808, 0.00173648, 0, 1, 0, 0, 
        -0.00990268, 0.00139173, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00990268, 0.00139173, 0, 1, 0, 0, 
        -0.00994522, 0.00104528, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00994522, 0.00104528, 0, 1, 0, 0, 
        -0.00997564, 0.000697562, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00997564, 0.000697562, 0, 1, 0, 0, 
        -0.00999391, 0.000348995, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00999391, 0.000348995, 0, 1, 0, 0, 
        -0.01, -8.74228e-10, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.01, -8.74228e-10, 0, 1, 0, 0, 
        -0.00999391, -0.000348996, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00999391, -0.000348996, 0, 1, 0, 0, 
        -0.00997564, -0.000697564, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00997564, -0.000697564, 0, 1, 0, 0, 
        -0.00994522, -0.00104528, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00994522, -0.00104528, 0, 1, 0, 0, 
        -0.00990268, -0.00139173, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00990268, -0.00139173, 0, 1, 0, 0, 
        -0.00984808, -0.00173648, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00984808, -0.00173648, 0, 1, 0, 0, 
        -0.00978148, -0.00207912, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00978148, -0.00207912, 0, 1, 0, 0, 
        -0.00970296, -0.00241922, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00970296, -0.00241922, 0, 1, 0, 0, 
        -0.00961262, -0.00275638, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00961262, -0.00275638, 0, 1, 0, 0, 
        -0.00951057, -0.00309017, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00951057, -0.00309017, 0, 1, 0, 0, 
        -0.00939693, -0.0034202, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00939693, -0.0034202, 0, 1, 0, 0, 
        -0.00927184, -0.00374607, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00927184, -0.00374607, 0, 1, 0, 0, 
        -0.00913545, -0.00406737, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00913545, -0.00406737, 0, 1, 0, 0, 
        -0.00898794, -0.00438371, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00898794, -0.00438371, 0, 1, 0, 0, 
        -0.00882948, -0.00469472, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00882948, -0.00469472, 0, 1, 0, 0, 
        -0.00866025, -0.005, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00866025, -0.005, 0, 1, 0, 0, 
        -0.00848048, -0.00529919, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00848048, -0.00529919, 0, 1, 0, 0, 
        -0.00829038, -0.00559193, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00829038, -0.00559193, 0, 1, 0, 0, 
        -0.00809017, -0.00587785, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00809017, -0.00587785, 0, 1, 0, 0, 
        -0.00788011, -0.00615661, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00788011, -0.00615661, 0, 1, 0, 0, 
        -0.00766044, -0.00642788, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00766044, -0.00642788, 0, 1, 0, 0, 
        -0.00743145, -0.00669131, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00743145, -0.00669131, 0, 1, 0, 0, 
        -0.0071934, -0.00694659, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.0071934, -0.00694659, 0, 1, 0, 0, 
        -0.00694658, -0.0071934, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00694658, -0.0071934, 0, 1, 0, 0, 
        -0.00669131, -0.00743145, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00669131, -0.00743145, 0, 1, 0, 0, 
        -0.00642788, -0.00766045, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00642788, -0.00766045, 0, 1, 0, 0, 
        -0.00615662, -0.00788011, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00615662, -0.00788011, 0, 1, 0, 0, 
        -0.00587785, -0.00809017, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00587785, -0.00809017, 0, 1, 0, 0, 
        -0.00559193, -0.00829038, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00559193, -0.00829038, 0, 1, 0, 0, 
        -0.00529919, -0.00848048, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00529919, -0.00848048, 0, 1, 0, 0, 
        -0.005, -0.00866025, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.005, -0.00866025, 0, 1, 0, 0, 
        -0.00469472, -0.00882948, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00469472, -0.00882948, 0, 1, 0, 0, 
        -0.00438371, -0.00898794, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00438371, -0.00898794, 0, 1, 0, 0, 
        -0.00406737, -0.00913545, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00406737, -0.00913545, 0, 1, 0, 0, 
        -0.00374606, -0.00927184, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00374606, -0.00927184, 0, 1, 0, 0, 
        -0.0034202, -0.00939693, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.0034202, -0.00939693, 0, 1, 0, 0, 
        -0.00309017, -0.00951057, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00309017, -0.00951057, 0, 1, 0, 0, 
        -0.00275637, -0.00961262, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00275637, -0.00961262, 0, 1, 0, 0, 
        -0.00241922, -0.00970296, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00241922, -0.00970296, 0, 1, 0, 0, 
        -0.00207911, -0.00978148, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00207911, -0.00978148, 0, 1, 0, 0, 
        -0.00173648, -0.00984808, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00173648, -0.00984808, 0, 1, 0, 0, 
        -0.00139173, -0.00990268, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00139173, -0.00990268, 0, 1, 0, 0, 
        -0.00104528, -0.00994522, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.00104528, -0.00994522, 0, 1, 0, 0, 
        -0.000697561, -0.00997564, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.000697561, -0.00997564, 0, 1, 0, 0, 
        -0.000348993, -0.00999391, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        -0.000348993, -0.00999391, 0, 1, 0, 0, 
        1.19249e-10, -0.01, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        1.19249e-10, -0.01, 0, 1, 0, 0, 
        0.000348998, -0.00999391, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.000348998, -0.00999391, 0, 1, 0, 0, 
        0.000697566, -0.00997564, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.000697566, -0.00997564, 0, 1, 0, 0, 
        0.00104528, -0.00994522, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00104528, -0.00994522, 0, 1, 0, 0, 
        0.00139173, -0.00990268, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00139173, -0.00990268, 0, 1, 0, 0, 
        0.00173649, -0.00984808, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00173649, -0.00984808, 0, 1, 0, 0, 
        0.00207912, -0.00978148, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00207912, -0.00978148, 0, 1, 0, 0, 
        0.00241922, -0.00970296, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00241922, -0.00970296, 0, 1, 0, 0, 
        0.00275638, -0.00961262, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00275638, -0.00961262, 0, 1, 0, 0, 
        0.00309017, -0.00951056, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00309017, -0.00951056, 0, 1, 0, 0, 
        0.0034202, -0.00939693, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.0034202, -0.00939693, 0, 1, 0, 0, 
        0.00374607, -0.00927184, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00374607, -0.00927184, 0, 1, 0, 0, 
        0.00406737, -0.00913545, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00406737, -0.00913545, 0, 1, 0, 0, 
        0.00438371, -0.00898794, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00438371, -0.00898794, 0, 1, 0, 0, 
        0.00469472, -0.00882948, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00469472, -0.00882948, 0, 1, 0, 0, 
        0.005, -0.00866025, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.005, -0.00866025, 0, 1, 0, 0, 
        0.00529919, -0.00848048, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00529919, -0.00848048, 0, 1, 0, 0, 
        0.00559193, -0.00829038, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00559193, -0.00829038, 0, 1, 0, 0, 
        0.00587785, -0.00809017, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00587785, -0.00809017, 0, 1, 0, 0, 
        0.00615662, -0.00788011, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00615662, -0.00788011, 0, 1, 0, 0, 
        0.00642788, -0.00766044, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00642788, -0.00766044, 0, 1, 0, 0, 
        0.00669131, -0.00743145, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00669131, -0.00743145, 0, 1, 0, 0, 
        0.00694659, -0.00719339, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00694659, -0.00719339, 0, 1, 0, 0, 
        0.0071934, -0.00694658, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.0071934, -0.00694658, 0, 1, 0, 0, 
        0.00743145, -0.00669131, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00743145, -0.00669131, 0, 1, 0, 0, 
        0.00766045, -0.00642787, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00766045, -0.00642787, 0, 1, 0, 0, 
        0.00788011, -0.00615661, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00788011, -0.00615661, 0, 1, 0, 0, 
        0.00809017, -0.00587785, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00809017, -0.00587785, 0, 1, 0, 0, 
        0.00829037, -0.00559193, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00829037, -0.00559193, 0, 1, 0, 0, 
        0.00848048, -0.00529919, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00848048, -0.00529919, 0, 1, 0, 0, 
        0.00866026, -0.005, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00866026, -0.005, 0, 1, 0, 0, 
        0.00882948, -0.00469471, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00882948, -0.00469471, 0, 1, 0, 0, 
        0.00898794, -0.00438371, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00898794, -0.00438371, 0, 1, 0, 0, 
        0.00913546, -0.00406736, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00913546, -0.00406736, 0, 1, 0, 0, 
        0.00927184, -0.00374606, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00927184, -0.00374606, 0, 1, 0, 0, 
        0.00939693, -0.0034202, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00939693, -0.0034202, 0, 1, 0, 0, 
        0.00951057, -0.00309017, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00951057, -0.00309017, 0, 1, 0, 0, 
        0.00961262, -0.00275638, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00961262, -0.00275638, 0, 1, 0, 0, 
        0.00970296, -0.00241922, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00970296, -0.00241922, 0, 1, 0, 0, 
        0.00978148, -0.00207911, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00978148, -0.00207911, 0, 1, 0, 0, 
        0.00984808, -0.00173648, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00984808, -0.00173648, 0, 1, 0, 0, 
        0.00990268, -0.00139173, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00990268, -0.00139173, 0, 1, 0, 0, 
        0.00994522, -0.00104529, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00994522, -0.00104529, 0, 1, 0, 0, 
        0.00997564, -0.000697564, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00997564, -0.000697564, 0, 1, 0, 0, 
        0.00999391, -0.000348996, 0, 1, 0, 0, 
        0, 0, 0, 1, 0, 0, 
        0.00999391, -0.000348996, 0, 1, 0, 0, 
        0.01, 1.74846e-09, 0, 1, 0, 0 
    };

    float blockVertices[] = {
        -0.1, 0.0125, 0.0, 0.0, 1.0, 0.0,
        -0.1, -0.0125, 0.0, 0.0, 1.0, 0.0,
        0.1, 0.0125, 0.0, 0.0, 1.0, 0.0,

        -0.1, -0.0125, 0.0, 0.0, 1.0, 0.0,
        0.1, 0.0125, 0.0, 0.0, 1.0, 0.0,
        0.1, -0.0125, 0.0, 0.0, 1.0, 0.0
    };
    
    // for (int i = 0; i < 180; i++) {
    //     std::cout << 0.0f << ", " << 0.0f << ", " << 0.0f << ", " << 1.0f << ", " << 0.0f << ", " << 0.0f << ", " << std::endl;
    //     std::cout << cos(i*PI/90)*0.01 << ", " << sin(i*PI/90)*0.01 << ", " << 0.0f << ", " << 1.0f << ", " << 0.0f << ", " << 0.0f << ", " << std::endl;
    //     std::cout << cos((i+1)*PI/90)*0.01 << ", " << sin((i+1)*PI/90)*0.01 << ", " << 0.0f << ", " << 1.0f << ", " << 0.0f << ", " << 0.0f << ", " << std::endl;
    // }

    // std::cout << cos(0) * 0.5f << std::endl;
    // std::cout << 0.0f << std::endl;
    // float ballVertices[] = {
    //     0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
    //     1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
    //     cos(PI / 3), sin(PI / 3), 0.0f, 1.0f, 0.0f, 0.0f,

    //     0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
    //     cos(PI / 3), sin(PI / 3), 0.0f, 1.0f, 0.0f, 0.0f,
    //     cos(PI * 2 / 3), sin(PI * 2 / 3), 0.0f, 1.0f, 0.0f, 0.0f,

    //     0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
    //     cos(PI * 2 / 3), sin(PI * 2 / 3), 0.0f, 1.0f, 0.0f, 0.0f,
    //     cos(PI), sin(PI), 0.0f, 1.0f, 0.0f, 0.0f
    // };

    // get the vertices for the paddle
    // float paddleVertices[36];

    // paddleVertices[]
    // std::cout << "-0.125, 0.01, 0.0, 0.0, 0.0, 1.0," << std::endl;
    // std::cout << "-0.125, -0.01, 0.0, 0.0, 0.0, 1.0," << std::endl;
    // std::cout << "0.0, -0.01, 0.0, 0.0, 0.0, 1.0," << std::endl;
    // std::cout << "0.0, -0.01, 0.0, 0.0, 0.0, 1.0," << std::endl;
    // std::cout << "0.125, -0.01, 0.0, 0.0, 0.0, 1.0," << std::endl;
    // std::cout << "0.125, 0.01, 0.0, 0.0, 0.0, 1.0," << std::endl;

    // float x, y;
    // for (float theta = PI/2 - atan(0.125/1.01); theta < PI/2 + atan(0.125/1.01); theta = theta + 0.01) {
    //     if (abs(PI/2 + atan(0.125/1.01) - theta) > 0.01) {
    //         x = cos(theta+0.01) * 1.017705753;
    //         y = sin(theta+0.01) * 1.017705753;

    //         std::cout << x << ", " << y-1 << ", 0.0, 0.0, 0.0, 1.0," << std::endl;

    //         x = cos(theta) * 1.017705753;
    //         y = sin(theta) * 1.017705753;
            
    //         std::cout << x << ", " << y-1 << ", 0.0, 0.0, 0.0, 1.0," << std::endl;            
    //         std::cout << "0.0, -0.01, 0.0, 0.0, 0.0, 1.0," << std::endl;
    //     } else {
    //         float x = cos(theta) * 1.017705753;
    //         float y = sin(theta) * 1.017705753;

    //         std::cout << x << ", " << y-1 << ", 0.0, 0.0, 0.0, 1.0," << std::endl;
    //         std::cout << "0.125, 0.01, 0.0, 0.0, 0.0, 1.0," << std::endl;
    //         std::cout << "0.0, -0.01, 0.0, 0.0, 0.0, 1.0," << std::endl;
    //     }
    // }

    Shader paddleShader("shaders/paddle.vert", "shaders/paddle.frag");
    Shader ballShader("shaders/ball.vert", "shaders/ball.frag");
    Shader blockShader("shaders/block.vert", "shaders/block.frag");

    unsigned int paddleVBO, paddleVAO;
    glGenVertexArrays(1, &paddleVAO);
    glGenBuffers(1, &paddleVBO);
    glBindVertexArray(paddleVAO);

    glBindBuffer(GL_ARRAY_BUFFER, paddleVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(paddleVertices), paddleVertices, GL_DYNAMIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    unsigned int ballVBO, ballVAO;
    glGenVertexArrays(1, &ballVAO);
    glGenBuffers(1, &ballVBO);
    glBindVertexArray(ballVAO);

    glBindBuffer(GL_ARRAY_BUFFER, ballVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(ballVertices), ballVertices, GL_DYNAMIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    unsigned int blockVBO, blockVAO;
    glGenVertexArrays(1, &blockVAO);
    glGenBuffers(1, &blockVBO);
    glBindVertexArray(blockVAO);

    glBindBuffer(GL_ARRAY_BUFFER, blockVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(blockVertices), blockVertices, GL_DYNAMIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    Shader textShader("shaders/text.vert", "shaders/text.frag");
    glm::mat4 projection = glm::ortho(0.0f, static_cast<float>(SCR_WIDTH), 0.0f, static_cast<float>(SCR_HEIGHT));
    textShader.use();
    glUniformMatrix4fv(glGetUniformLocation(textShader.ID, "projection"), 1, GL_FALSE, glm::value_ptr(projection));

    FT_Library ft;
    if (FT_Init_FreeType(&ft)) {
        std::cout << "ERROR::FREETYPE: Could not init FreeType Library" << std::endl;
        return -1;
    }

    std::string font_name = "fonts/Arial_Bold.ttf";
    if (font_name.empty()) {
        std::cout << "ERROR::FREETYPE: Failed to load font_name" << std::endl;
        return -1;
    }
	
	// load font as face
    FT_Face face;
    if (FT_New_Face(ft, font_name.c_str(), 0, &face)) {
        std::cout << "ERROR::FREETYPE: Failed to load font" << std::endl;
        return -1;
    } else {
        // set size to load glyphs as
        FT_Set_Pixel_Sizes(face, 0, 16);

        // disable byte-alignment restriction
        glPixelStorei(GL_UNPACK_ALIGNMENT, 1);

        // load first 128 characters of ASCII set
        for (unsigned char c = 0; c < 128; c++) {
            // Load character glyph 
            if (FT_Load_Char(face, c, FT_LOAD_RENDER)) {
                std::cout << "ERROR::FREETYTPE: Failed to load Glyph" << std::endl;
                continue;
            }
            // generate texture
            unsigned int texture;
            glGenTextures(1, &texture);
            glBindTexture(GL_TEXTURE_2D, texture);
            glTexImage2D(
                GL_TEXTURE_2D,
                0,
                GL_RED,
                face->glyph->bitmap.width,
                face->glyph->bitmap.rows,
                0,
                GL_RED,
                GL_UNSIGNED_BYTE,
                face->glyph->bitmap.buffer
            );
            // set texture options
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
            // now store character for later use
            Character character = {
                texture,
                glm::ivec2(face->glyph->bitmap.width, face->glyph->bitmap.rows),
                glm::ivec2(face->glyph->bitmap_left, face->glyph->bitmap_top),
                static_cast<unsigned int>(face->glyph->advance.x)
            };
            Characters.insert(std::pair<char, Character>(c, character));
        }
        glBindTexture(GL_TEXTURE_2D, 0);
    }
    // destroy FreeType once we're finished
    FT_Done_Face(face);
    FT_Done_FreeType(ft);

    glGenVertexArrays(1, &textVAO);
    glGenBuffers(1, &textVBO);
    glBindVertexArray(textVAO);
    glBindBuffer(GL_ARRAY_BUFFER, textVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(float) * 6 * 4, NULL, GL_DYNAMIC_DRAW);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 4 * sizeof(float), 0);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    float timeOfLastHit = 0;    
    while (!glfwWindowShouldClose(window)) {
        processInput(window);

        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        glm::mat4 paddleTransform = glm::mat4(1.0f);
        paddleTransform = glm::translate(paddleTransform, glm::vec3(paddlePos, 0.0f));

        paddleShader.use();
        unsigned int paddleTransformLoc = glGetUniformLocation(paddleShader.ID, "transform");
        glUniformMatrix4fv(paddleTransformLoc, 1, GL_FALSE, glm::value_ptr(paddleTransform));

        glBindVertexArray(paddleVAO);
        glDrawArrays(GL_TRIANGLES, 0, sizeof(paddleVertices));

        glm::mat4 ballTransform = glm::mat4(1.0f);
        ballTransform = glm::translate(ballTransform, glm::vec3(ballPos, 0.0f));

        ballShader.use();
        unsigned int ballTransformLoc = glGetUniformLocation(ballShader.ID, "transform");
        glUniformMatrix4fv(ballTransformLoc, 1, GL_FALSE, glm::value_ptr(ballTransform));

        glBindVertexArray(ballVAO);
        glDrawArrays(GL_TRIANGLES, 0, 180*3);

        blockShader.use();
        for (int i = 0; i < 70; i++) {
            if (blockData[i]) {
                for (int j = 0; j < 10; j++) {
                    if (blockData[i][j] != 0) {
                        glm::mat4 blockTransform = glm::mat4(1.0f);
                        blockTransform = glm::translate(blockTransform, glm::vec3(-0.9+0.2*j, 0.9875-0.025*i, 0.0f));

                        glm::vec3 blockColor = glm::vec3(0.0f, 0.1f*blockData[i][j], 0.0f);

                        unsigned int blockTransformLoc = glGetUniformLocation(blockShader.ID, "transform");
                        glUniformMatrix4fv(blockTransformLoc, 1, GL_FALSE, glm::value_ptr(blockTransform));

                        unsigned int blockColorLoc = glGetUniformLocation(blockShader.ID, "blockColor");
                        glUniform3fv(blockColorLoc, 1, glm::value_ptr(blockColor));

                        glBindVertexArray(blockVAO);
                        glDrawArrays(GL_TRIANGLES, 0, 6*3);    
                    }
                }
            }
        }

        RenderText(textShader, std::to_string(score), 25.0f, 25.0f, 1.0f, glm::vec3(0.5f, 0.8f, 0.2f));
        if ((newGame == 1) && (ballVelocity == glm::vec2(0.0f, 0.0f))) {
            RenderText(textShader, newGameLine, 250.0f, 450.0f, 2.0f, glm::vec3(0.5f, 0.8f, 0.2f));
        } else if ((gameOver == 1) && (ballVelocity == glm::vec2(0.0f, 0.0f))) {
            RenderText(textShader, newGameLine, 250.0f, 450.0f, 2.0f, glm::vec3(0.5f, 0.8f, 0.2f));
            RenderText(textShader, GameOverLine, 310.0f, 500.0f, 2.0f, glm::vec3(0.5f, 0.8f, 0.2f));
        }

        // set new ballPos
        ballPos = ballPos + ballVelocity;
        if (ballPos[1] <= -0.99) {
            ballVelocity = glm::vec2(0.0f, 0.0f);
            gameOver = 1;
            score = 0;
        } else if (ballPos[0] <= -0.99) {
            ballVelocity = glm::vec2(-ballVelocity[0], ballVelocity[1]);
        } else if (ballPos[1] >= 0.99) {
            ballVelocity = glm::vec2(ballVelocity[0], -ballVelocity[1]);
        } else if (ballPos[0] >= 0.99) {
            ballVelocity = glm::vec2(-ballVelocity[0], ballVelocity[1]);
        } else if ((distance(ballPos, glm::vec2(paddlePos[0], paddlePos[1]-1.01)) <= 1.027705753) && (abs(paddlePos[1] - ballPos[1]) <= 0.02) && (ballPos[0] >= paddlePos[0]-0.125f)) {
            if ((float)glfwGetTime() - timeOfLastHit >= 0.5) {
                float distanceFromPaddle = ballPos[0] - paddlePos[0];
                if (ballVelocity[0] > 0) {
                    if (distanceFromPaddle > 0) {
                        // std::cout << "Hit type 0" << std::endl;
                        float returnAngle = 2*acos(distanceFromPaddle/1.01770573) + atan(-ballVelocity[1]/ballVelocity[0]) - PI;
                        ballVelocity = glm::vec2(0.008602325*cos(returnAngle), 0.008602325*sin(returnAngle));
                        timeOfLastHit = (float)glfwGetTime();
                        score = score + 1;
                        updateBlocks(score);
                    } else if (distanceFromPaddle < 0) {
                        // std::cout << "Hit type 1 " << std::endl;
                        float returnAngle = 2*acos(distanceFromPaddle/1.01770573) + atan(-ballVelocity[1]/ballVelocity[0]) - PI;
                        ballVelocity = glm::vec2(0.008602325*cos(returnAngle), 0.008602325*sin(returnAngle));
                        timeOfLastHit = (float)glfwGetTime();
                        score = score + 1;
                        updateBlocks(score);
                    } else {
                        // std::cout << "Hit type 2" << std::endl;
                        ballVelocity = glm::vec2(ballVelocity[0], -ballVelocity[1]);   
                        timeOfLastHit = (float)glfwGetTime();
                        score = score + 1;
                        updateBlocks(score);
                    }
                } else if (ballVelocity[0] < 0) {
                    if (distanceFromPaddle > 0) {
                        // std::cout << "Hit type 3" << std::endl;
                        float returnAngle = - 2*acos(distanceFromPaddle/1.01770573) + atan(-ballVelocity[1]/ballVelocity[0]);
                        ballVelocity = glm::vec2(0.008602325*cos(returnAngle), 0.008602325*sin(returnAngle));
                        timeOfLastHit = (float)glfwGetTime();
                        score = score + 1;
                        updateBlocks(score);
                    } else if (distanceFromPaddle < 0) {
                        // std::cout << "Hit type 4" << std::endl;
                        float returnAngle = - 2*acos(distanceFromPaddle/1.01770573) + atan(-ballVelocity[1]/ballVelocity[0]);
                        ballVelocity = glm::vec2(0.008602325*cos(returnAngle), 0.008602325*sin(returnAngle));
                        timeOfLastHit = (float)glfwGetTime();
                        score = score + 1;
                        updateBlocks(score);
                    } else {
                        // std::cout << "Hit type 5" << std::endl;
                        ballVelocity = glm::vec2(ballVelocity[0], -ballVelocity[1]);   
                        timeOfLastHit = (float)glfwGetTime();
                        score = score + 1;
                        updateBlocks(score);
                    }
                }
            }
        }

        // check if the ball hit a block
        for (int i = 0; i < 70; i++) {
            for (int j = 0; j < 10; j++) {
                if ((float)glfwGetTime() - timeOfLastHit >= 0.2) {
                    // check if there is a block there
                    if (blockData[i][j] != 0) {
                        // check if we hit the bottom face of a block
                        if ((-1.0+0.2*j < ballPos[0]) && (ballPos[0] < -0.8+0.2*j)) {
                            if ((ballPos[1] < 0.9875-0.025*i - 0.0025) && (0.9875-0.025*i - 0.0225 < ballPos[1])) {
                                ballVelocity = glm::vec2(ballVelocity[0], -ballVelocity[1]);
                                blockData[i][j] = blockData[i][j] - 1;
                            } else if ((ballPos[1] < 0.9875-0.025*i + 0.0225) && (ballPos[1] > 0.9875-0.025*i + 0.0125)) {
                                ballVelocity = glm::vec2(ballVelocity[0], -ballVelocity[1]);
                                blockData[i][j] = blockData[i][j] - 1;
                            }
                        }
                        // } else if ((ballPos[1] < 0.9875-0.025*i + 0.0125) && (ballPos[1] > 0.9875-0.025*i - 0.0125)) {
                        //     if ((ballPos[0] < -1.0+0.2*j) && (ballPos[1] > -1.01+0.2*j)) {
                        //         ballVelocity = glm::vec2(-ballVelocity[0], ballVelocity[1]);
                        //         blockData[i][j] = blockData[i][j] - 1;
                        //     } else if ((ballPos[0] > -0.8+0.2*j) && (ballPos[0] < -0.79+0.2*j)) {
                        //         ballVelocity = glm::vec2(-ballVelocity[0], ballVelocity[1]);
                        //         blockData[i][j] = blockData[i][j] - 1;
                        //     }
                        // }
                    }
                }                
            }
        }

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // glDeleteVertexArrays(1, &paddleVAO);
    // glDeleteBuffers(1, &paddleVBO);

    glDeleteVertexArrays(1, &ballVAO);
    glDeleteBuffers(1, &ballVBO);

    glfwTerminate();
    return 0;
}

void processInput(GLFWwindow* window) {
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
        glfwSetWindowShouldClose(window, true);
    } else if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS) {
        if (paddlePos[0] <= 0.9) {
            paddlePos = glm::vec2(paddlePos[0] + 0.01, paddlePos[1]);
        }
    } else if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS) {
        if (paddlePos[0] >= -0.9) {
            paddlePos = glm::vec2(paddlePos[0] - 0.01, paddlePos[1]);
        }
    } else if (glfwGetKey(window, GLFW_KEY_SPACE) == GLFW_PRESS) {
        if (ballVelocity == glm::vec2(0, 0)) {
            if (ballPos[1] <= -0.99) {
                ballPos = glm::vec2(0, 0);
                gameOver = 0;
            }
            ballVelocity = glm::vec2(0.005, -0.007);
            newGame = 0;
        }
    }
}

void framebuffer_size_callback(GLFWwindow* window, int width, int height) {
    glViewport(0, 0, width, height);
}

void RenderText(Shader &shader, std::string text, float x, float y, float scale, glm::vec3 color) {
    // activate corresponding render state	
    shader.use();
    glUniform3f(glGetUniformLocation(shader.ID, "textColor"), color.x, color.y, color.z);
    glActiveTexture(GL_TEXTURE0);
    glBindVertexArray(textVAO);

    // iterate through all characters
    std::string::const_iterator c;
    for (c = text.begin(); c != text.end(); c++) {
        Character ch = Characters[*c];

        float xpos = x + ch.Bearing.x * scale;
        float ypos = y - (ch.Size.y - ch.Bearing.y) * scale;

        float w = ch.Size.x * scale;
        float h = ch.Size.y * scale;
        // update VBO for each character
        float vertices[6][4] = {
            { xpos,     ypos + h,   0.0f, 0.0f },            
            { xpos,     ypos,       0.0f, 1.0f },
            { xpos + w, ypos,       1.0f, 1.0f },

            { xpos,     ypos + h,   0.0f, 0.0f },
            { xpos + w, ypos,       1.0f, 1.0f },
            { xpos + w, ypos + h,   1.0f, 0.0f }           
        };
        // render glyph texture over quad
        glBindTexture(GL_TEXTURE_2D, ch.TextureID);
        // update content of VBO memory
        glBindBuffer(GL_ARRAY_BUFFER, textVBO);
        glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(vertices), vertices); // be sure to use glBufferSubData and not glBufferData

        glBindBuffer(GL_ARRAY_BUFFER, 0);
        // render quad
        glDrawArrays(GL_TRIANGLES, 0, 6);
        // now advance cursors for next glyph (note that advance is number of 1/64 pixels)
        x += (ch.Advance >> 6) * scale; // bitshift by 6 to get value in pixels (2^6 = 64 (divide amount of 1/64th pixels by 64 to get amount of pixels))
    }
    glBindVertexArray(0);
    glBindTexture(GL_TEXTURE_2D, 0);
}

void updateBlocks(int totalAmount) {
    // were gonna generate random blocks with the total value being totalAmount
    // generate the blocks one at a time going down until we reach zero blocks that we can make
    int barPlacement[10] = {rand() % (totalAmount+1),
                            rand() % (totalAmount+1),
                            rand() % (totalAmount+1),
                            rand() % (totalAmount+1),
                            rand() % (totalAmount+1),
                            rand() % (totalAmount+1),
                            rand() % (totalAmount+1),
                            rand() % (totalAmount+1),
                            rand() % (totalAmount+1),
                            rand() % (totalAmount+1)};

    std::sort(barPlacement, barPlacement + sizeof(barPlacement) / sizeof(barPlacement[0]));
    int barValues[10] = {barPlacement[1] - barPlacement[0],
                         barPlacement[2] - barPlacement[1],
                         barPlacement[3] - barPlacement[2],
                         barPlacement[4] - barPlacement[3],
                         barPlacement[5] - barPlacement[4],
                         barPlacement[6] - barPlacement[5],
                         barPlacement[7] - barPlacement[6],
                         barPlacement[8] - barPlacement[7],
                         barPlacement[9] - barPlacement[8],
                         totalAmount - barPlacement[9]};
    
    int blockDataNew[70][10];
    for (int i = 1; i < 70; i++) {
        for (int j = 0; j < 10; j++) {
            blockDataNew[i][j] = blockData[i-1][j];
        };
    };

    for (int i = 0; i < 10; i++) {
        blockDataNew[0][i] = barValues[i];
    };

    for (int i = 0; i < 70; i++) {
        for (int j = 0; j < 10; j++) {
            blockData[i][j] = blockDataNew[i][j];
        };
    };
    // blockData[0].push  {{barValues[0], glm::vec2(-0.9, 0.9875)},
    //                  {barValues[1], glm::vec2(-0.7, 0.9875)},
    //                  {barValues[2], glm::vec2(-0.5, 0.9875)},
    //                  {barValues[3], glm::vec2(-0.3, 0.9875)},
    //                  {barValues[4], glm::vec2(-0.1, 0.9875)},
    //                  {barValues[5], glm::vec2(0.1, 0.9875)},
    //                  {barValues[6], glm::vec2(0.3, 0.9875)},
    //                  {barValues[7], glm::vec2(0.5, 0.9875)},
    //                  {barValues[8], glm::vec2(0.7, 0.9875)},
    //                  {barValues[9], glm::vec2(0.9, 0.9875)}};
}